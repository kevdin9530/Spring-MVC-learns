You can either use XML file to set config for ur Spring MVC
or you can configure with java code. Example is DemoAppConfig and 
MySpringMvcDispatcherServletInitializer

Developing Controller and Views - Development Process: 
- Create controller class
- Define controller method
- Add request mapping to controller method
- return view name
- development view page

To create controller class. simply create a class and add Anno @Controller
To define controller method, go to your controller class, create a method
with any name u like and your return can be any type too. However
you need to add @RequestMapping("") to define the URL for your controller

in the example, the controller will return a string but according to our
configuration file, the name return will add suffix-prefix and find the
path to that file accordingly.

We need to create a page for the main-menu example
It can be any regular html or jsp file

OBS! NOTE TO SELF. Remember to config context component scan on right package path

Now we going to learn how to read form data with Spring MVC
development process:
- create controller class
- show html form (create controller method to show html form and create 
view page for HTMl form)
- process html form(create controller and development view page for html form)


Now we are going to adding data to spring model
The Model is a container for your app data
In your controller code: 
- You can put anything in the model
- string,object, info from db...
and your view page (JSP) can access the data from the model.

Code example: 
- create new method to access form data
- read the form data
- convert the data
- add new version of the data to the model.

to access resources simply add the following in your spring config file
<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>

for your view page, example of adding resources:
<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png">
There is a exampleHTMLCSS.txt which u can check out.


Reading HTML Form Data with @RequestParam Annotation
- create a method to process form data
- read form data
- convert data
- add new data version to the model 

Add controller, request mapping. 
by doing this you can:
- serves as parent mapping for the controller
- all request mappings on methods in the controller are relative
- similar to folder directory structure
For practice we will add another controller
In this case, we will encounter an error 500. By checking the
 log or console. We can see it said root cause: Ambiguous mapping.
 Basically it means that we cant use it becuz it already in use.
 So to differ one controller to another, you need to add a
 RequestMapping above your controller class and define different
 directory.
 
/////////////////////// Spring MVC form tag////////////////////

basically, html form are used to get input from the user and this time
we will learn the form with spring.
Spring MVC Form Tags are the building block for web page
Form tag are configurable and reusable for a web page

Spring MVC Form tag can make use of DATA BINDING and it allows 
to automatically set/retrieve data from java object/bean

The form tag will create html for the user
To know more about spring mvc form tag
go to: https://docs.spring.io/spring-framework/docs/5.0.2.RELEASE/spring-framework-reference/web.html#mvc-view-jsp-tags

As for the web structure, u can use a normal jsp page
and simply add some spring mvc form tag. You can just mix them. 

To ref this tags in jsp file, you need to add the following in beginning of 
ur file
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

1st tag form we go through is the text field
so in order to add the form u must add a model attribute
It will be the bean for holding the form of data binding

 Inside jsp form,
 in the model attribute u will add <form:input path = "firstName"/>
 When spring mvc loads the form, it will call student.getFirstName()
 
 To read the data, we can use @ModelAttribute("attribute_name")
 and bind it to a variable.
 
 so following the development process and practice:
 - Create student class
 - create student controller class
 - create new html form
 - create form processing code
 - create confirmation page
 
 when u get value of an attribute from the model in html or jsc
 u only need to write attribute.value then spring mvc will
 automatically call Attribute.getValue() method. 

now we move on to drop down tag
its similar to HTML <select> Tag. 
ex in HTML : 	
<select name ="country">
	<option> country_name1 </option>
	<option> country_name2 </option>
	...
<select/>

in spring mvc, the drop down tag is presented by 
<form:select path="name">
	<form:option value ="code" label ="diplay_name"/>
</form:select>
so we can practice with the following Development Process:
- update html form
- update student class 
- update process page

However, you have to write each option one by one and this will be a hassle
instead we can read a list of country with a java class.

!!!OBS!! If you want to read data from a properties file
1.you need to put the file in WEB-INF folder
2.update header section in spring config file
Following example code:
ml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
        xmlns:context="http://www.springframework.org/schema/context" 
        xmlns:mvc="http://www.springframework.org/schema/mvc" 
        xmlns:util="http://www.springframework.org/schema/util" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans     
            http://www.springframework.org/schema/beans/spring-beans.xsd     
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd     
            http://www.springframework.org/schema/mvc         
            http://www.springframework.org/schema/mvc/spring-mvc.xsd 
            http://www.springframework.org/schema/util     
            http://www.springframework.org/schema/util/spring-util.xsd">
            
3.After that create a bean in spring config file and add following to use
<util:properties  id="countryOptions" location="classpath:../file_name.properties" />
4.1 import java.util.Map; in your controller class
4.2 inject data with @Value 
ex: @Value("#{countryOptions}") 
private Map<String, String> countryOptions;
4.3 Add those in data in your model
ex: theModel.addAttribute("theCountryOptions", countryOptions); 
4.4 use that attribute in your jsp page with given attribute name
ex: <form:options items="${theCountryOptions}" />
4.5 Remove old reference that doesnt have with the file..

Form tag - Radio Buttons> 
tag in spring mvc is <form:radiobutton>
ex: 
Java <form:radiobutton path="dataBinding" value="Java"/>
path will indicate the call attribute.setDataBinding() method 
value is the display on the template.
You can populate the radio button the same as selectlist above
Check RadioButtonPopulateInJava.java for example.

Formtag - Check Box
use <form:checkbox>
because check box is a multiple choice so it require an array or a list to
store the data/answers. So in your jsp u need to ref the following jstl tag lib
<%@ taglib uri ="http://java.sun.com/jsp/jstl/core" prefix ="c"%>

Spring MVC form validation
The need for validation is:
- u want to validate the required field
- valid number in range
- valid format
- custom business code

Java has standard bean validiation api
define metadata model and api
doesnt tie to either web tier or persistence tier
available for server-side app and client side javaFX/Swing apps
For more info, check: http://www.beanvalidation.org

Spring and validation:
- Spring v4 and above has higher sp bean valid api
- perfer method for valid when building spring app
- simply add valid jar to the project

some feature of the bean valid is:
- required 
- length
- numbers
- regular exp
- custom valid

Valid Anno example:
- @NotNull
- @Min
- @Size
- @Pattern
- @Future/@Past .....

Road map for practice:
1. set up develop enviroment
2. required field
3. number range
4. valid regexp
5. custom valid

Setting up development enviroment
We are using Hibernate for validation
website: www.hibernate.org/validator

Hibernation validator version is updated based on Jakarta EE9
Jakarta EE9 is like JavaEE but make by the community (unlike java EE by oracle)
Jakarta EE9 is not a replacement for Java EE

 so in the import 
 instead of javax.* packages, we chance to jakarta.* instead
 More info on Jakatar EE, go to: jakarta.ee/about
 
 !!!!Spring 5 not compatible with HiberValidator7
 HiberValidator 6.2 is compatible with spring 5 and has same feature as HV7
 
 Development Process
 - download valid jar file from HV web
 - Add jar to the project
 
 Form Valid - Required Field
 Development Process:
 - ADd valid rule to class @NotNull or something on the class field
 - display error on html <form:errors> 
 - perform valid check on controller class @Valid on the model and check BindingResult class error method
 - update html check

The location of BindingResult is important. It must appear right after the
model attribute for it to work correctly.
with @NotNull and @Min, the validation will pass the blank space like            this.
Becuz its not null and the size is longer than 1. 
so in order to solve this, we use Anno @InitBinder
we just need to trim the whitespace in the input
 
 so we made a custom editor in controller with @InitBinder
 with initbinder it will pre-process all web request coming into controller
 after that the request can fetch from WebDataBinder class
 in this class we trim the white space so we use StringTrimmerEditor class which 
 defined string api. set true in StringTrimmerEditor allow to trim all whitespace to null
 register editor to the databinder
 
Validation - Number range with @Min @Max
practice with an new input field between range 0-10
Development Process
- add valid rule to class
- display error to html
- perform valid in controller 
- update process 

Validation - Regular Expression aka regex
regex is a sequence to define a search pattern. This pattern is used to find matches string
regex itself has an own language (advanced topic) n this project assume you know about regex
more info about regex: https://docs.oracle.com/javase/tutorial/essential/regex
Testing regex in validation:
- Add input field for postal code
- Postal code limit : 5 digits
Development process: 
- Add validation rule to customer class
- Display error msg on html form
- Update process page.

Validation - Integer field required
if you use int and your input is either null or space. It will be count as string and not compatible with your data.
So to fix this simply change int datatype to Integer instead
furthermore you need to add a custom error message. 
Development process:
- create custome error message
- load custom error msg in spring config
the custom error in this case is:
typeMismatch.customer.freePass = Invalid number
typeMismatch = error type
customer = spring model attribute
freePass = field name; 
due to the custom must follow springframework
u need to add the following code in ur spring config
<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames"
			value="resources/message" />
	</bean>
	
Deep dive more in custom error text
To know more about this, we printout binding result.
So whenever an error is appear we can see it in the console or a log depend on your code. 
When printing error it will said about the "codes" which indicate where the error text is.
Knowing the sources, we can override it with our custom error text.

Validation - Custom Validation
- Validation based on ur business rule/logic
- Spring MVC will call our custom validation
- our custom validation will return a boolean if it pass or fail (T/F)
For custom validation, we will create a custom java annotation
ex this case: @CourseCode
Development Process:
- create custom validation rule (create custom Anno, a custom class for validation logic, 
- Add validation rule to class
- display error msg on html form
- update process page

In ur custom anno validation u need to have: 
@Constraint (validatedBy = ???.class) becuz u want this Annotation to be a validation
the validation is another healper class about the logic of validation
@Target({ElementType.METHOD}{ElementType.FIELD}) 
Target anno indicate which type of element can we apply our annotation in. 
In this case, our anno only apply on METHOD or a FIELD
@Retention(RetentionPolicy.RUNTIME)
Retention allows how long our annotation retains it. In this case, we basically keep
this annotation in the compiled java so we can use/introspect/instrument it during run time
After adding Anno to your custom Anno, we need to know how many parameter your custom Anno 
need. After that we add methods of our anno according to our parameter. 
ex:
public String value() default "LUV";
mean that the "value" input in our custom Anno must be type String. if we dont input any then
the default will be LUV in this case.
Adding groups
Adding payloads : provide custom detail about validation failure (severity level, error code ect)
Your Anno

Moving to making a healper class for the validation
the custom validation class need to implement ConstraintValidator<CustomAnno_name, data type for validation>
create a private data suffix that has the same datatype as for validation
the private datasuffix will get the value from data which we apply the Annotation
in Inin() method
The private data will need to override in isValid(HTML form data(entered by user), ConstraintValidatorContext)
after that use the data and compare according to business logic.
in our case, we check if the code start with our prefix. so we have data.startWith("")
!!!!!OBS!!!!!!!!! You need also check Null value else it will create NULLPOINTEREXCEPTION error
!!!EXTRA: you can update your Anno to check an array of String too. 
basically the method value() should have String [] value() default{}...
And your helper validation class should 
 


 



